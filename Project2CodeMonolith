import processing.video.*;
import ddf.minim.*;

int pBrightestX = 0;
int pBrightestY = 0;
float easing = 0.05;

float x;
float y;


Capture video;

Minim minim;
AudioPlayer player;
AudioSample quiet;
//AudioSnippet medium;
//AudioPlayer louder;


void setup() {
  size(960, 720);
  // Uses the default video input, see the reference if this causes an error
  video = new Capture(this, width, height);

  video.start();  
  noStroke();
  smooth();
  minim = new Minim(this);
  
 quiet = minim.loadSample("quiet.mp3");
  //medium = minim.loadSnippet("medium.mp3");
  //  louder = minim.loadFile("louder.mp3");
  player = minim.loadFile("Edited-2001Spacemp3.mp3");
}


void draw() {
  if (video.available()) {
    video.read();
    //image(video, 0, 0, width, height); // Draw the webcam video onto the screen
    int brightestX = 0; // X-coordinate of the brightest video pixel
    int brightestY = 0; // Y-coordinate of the brightest video pixel
    float brightestValue = 0; // Brightness of the brightest video pixel
    // Search for the brightest pixel: For each row of pixels in the video image and
    // for each pixel in the yth row, compute each pixel's index in the video
    video.loadPixels();
    int index = 0;
    for (int y = 0; y < video.height; y++) {
      for (int x = 0; x < video.width; x++) {
        // Get the color stored in the pixel
        int pixelValue = video.pixels[index];
        // Determine the brightness of the pixel
        float pixelBrightness = brightness(pixelValue);
        // If that value is brighter than any previous, then store the
        // brightness of that pixel, as well as its (x,y) location
        if (pixelBrightness > brightestValue) {
          brightestValue = pixelBrightness;
          pBrightestX = brightestX;
          pBrightestY = brightestY;
          brightestY = y;
          brightestX = x;

          //pVector? find distance bewteen px and x, and keep moving distance while drawing brush - when it crosses x
        }



       if (brightestX>=50 && brightestX<=150 && brightestY>=50 && brightestY<=150); 
        {
          quiet.trigger();
        }

        if (brightestX>=810 && brightestX<=910 && brightestY>=590 && brightestY<=700); 
        {
          quiet.trigger();
        }
        
        /*if (brightestX>=710 && brightestX<=910 && brightestY>=230 && brightestY<=490); 
         {
         medium.play();
         }
         
         
         if (brightestX>=510 && brightestX<=710 && brightestY>=230 && brightestY<=490); 
         {
         louder.play();
         }
         
         
         if (brightestX>=50 && brightestX<=250 && brightestY>=230 && brightestY<=490); 
         {
         medium.play();
         }
         
         if (brightestX>=250 && brightestX<=450 && brightestY>=230 && brightestY<=490); 
         {
         louder.play();
         } */

        if (brightestX>=400 && brightestX<=600 && brightestY>=200 && brightestY<=500) {
          player.play();
        }

        /*else {
         //quiet.close();
         // medium.close();
         // louder.close();
         player.close();
         minim.stop();
         }*/


        index++;
      }
    }

    // Draw a large, yellow circle at the brightest pixel

    //ellipse(brightestX, brightestY, 200, 200);

    ellipse(brightestX, brightestY, random(40), random(40));
    float speed = dist(pBrightestX, pBrightestY, brightestX, brightestY);
    float alpha = map(speed, 0, 20, 0, 10);
    println(alpha);
    float lineWidth = map(speed, 0, 20, 20, 1);
    lineWidth = constrain(lineWidth, 0, 2);
    noStroke();
    fill(0, alpha);
    smoothmoves();
    brush1(brightestX, brightestY, pBrightestX, pBrightestY, lineWidth);
  }

  /*if (brightness is above a certain threshhold, do this){
   player.play();
   
   }*/
}

void brush1(float x, float y, float px, float py, float lineWidth) {

  /* float easing = .9;
   float dx = px - x; 
   if(abs(dx) > 1) {
   x += dx * easing;
   }
   
   float dy = py - y;
   if(abs(dy) > 1) {
   y += dy * easing;
   } */

  background(0, 0, 0, 1);
  stroke(100, 125, 255, 120);
  fill(100, 140, 240, 10);

  pushMatrix();
  translate(x, y);
  rotate(random(px));
  //rect(px, py, 10, 10); 
  translate(x, y);
  rotate(random(px));

  rotate(random(px));

  rotate(random(px));

  popMatrix();



  pushMatrix();
  ellipse(x, y, px, py);
  ellipse(width/2+((width/2)-x), y, px, py);
  ellipse(x, height/2+((height/2)-y), px, py);
  ellipse(width/2+((width/2)-x), height/2+((height/2)-y), px, py);
  ellipse(width/2+((width/2)-y), width/2-((width/2)-x), px, py);
  ellipse(height/2-((height/2)-y), width/2-((width/2)-x), px, py);
  ellipse(width/2+((width/2)-y), height/2+((height/2)-x), px, py);
  ellipse(width/2-((width/2)-y), height/2+((height/2)-x), px, py);  
  popMatrix();

  pushMatrix();
  strokeWeight(lineWidth);
  // line(width/2+((width/2)-px), py, width/2+((width/2)-x), y);
  // line(px, height/2+((height/2)-py), x, height/2+((height/2)-y));
  // line(px, height/2+((height/2)-py), x, height/2+((height/2)-y));
  ellipse(x, y, px, py); 
  popMatrix();

  pushMatrix();
  ellipse(x, y, px, py);
  ellipse(width/2+((width/5)-x), y, px, py);
  ellipse(x, height/2+((height/2)-y), px, py);
  ellipse(width/2+((width/5)-x), height/2+((height/2)-y), px, py);
  ellipse(width/2+((width/5)-y), width/2-((width/2)-x), px, py);
  ellipse(height/2-((height/5)-y), width/2-((width/2)-x), px, py);
  ellipse(width/2+((width/5)-y), height/2+((height/2)-x), px, py);
  ellipse(width/2-((width/5)-y), height/2+((height/2)-x), px, py);  
  popMatrix();

  return;
}

void smoothmoves() {

  float dx = pBrightestX - x; 
  if (abs(dx) > 1) {
    x += dx * easing;
  }

  float dy = pBrightestY - y;
  if (abs(dy) > 1) {
    y += dy * easing;
  }
}
